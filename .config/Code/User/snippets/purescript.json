{
	// Place your snippets for purescript here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"ReaderTMonad": {
		"prefix": "readertmonad",
		"body": [
			"module ${1:Application.Effect} where",
			"",
			"import Prelude",
			"import Control.Monad.Except.Trans (ExceptT, runExceptT)",
			"import Control.Monad.Reader (runReaderT)",
			"import Control.Monad.Reader.Trans (ReaderT)",
			"import Data.Either (Either(..))",
			"import Effect (Effect)",
			"import Effect.Class (class MonadEffect)",
			"import Effect.Console (log)",
			"import Server.User.Types (Error, Environment)",
			"",
			"newtype ${2:ApplicationEffect} a",
			"  = $2 (ReaderT Environment (ExceptT Error Effect) a)",
			"",
			"run$2 :: Environment -> $2 String -> Effect Unit",
			"run$2 env ($2 m) =",
			"  runExceptT (runReaderT m env)",
			"    >>= case _ of",
			"        Left e -> log $ show e",
			"        Right a -> log a",
			"",
			"derive newtype instance functor$2 :: Functor $2",
			"derive newtype instance apply$2 :: Apply $2",
			"derive newtype instance applicative$2 :: Applicative $2",
			"derive newtype instance bind$2 :: Bind $2",
			"derive newtype instance monad$2 :: Monad $2",
			"derive newtype instance monadEffect$2 :: MonadEffect $2"
		],
		"description": "ReaderTMonad"
	},
	"CapabilityModule": {
		"prefix": "capabilityModule",
		"body": [
			"module ${1:User}.Capability where",
			"",
			"import Prelude",
			"",
			"class",
			"  Monad m <= ${2:Application}Monad m where",
			"  create :: String -> m String"
		],
		"description": "Capability"
	},
	"requestTypeModule": {
		"prefix": "moduleRequestBodyType",
		"body": [
			"module ${1:path}.${2:name} where",
			"",
			"import Prelude",
			"",
			"import Control.Monad.Except (except, runExcept)",
			"import Data.Bifunctor (lmap)",
			"import Data.Either (Either)",
			"import Data.Generic.Rep (class Generic)",
			"import Data.Generic.Rep.Eq (genericEq)",
			"import Data.Generic.Rep.Show (genericShow)",
			"import Data.Validation.Semigroup (toEither)",
			"import Foreign.Class (class Decode, class Encode)",
			"import Foreign.Generic (defaultOptions, genericDecode, genericEncode)",
			"import Payload.Server.DecodeBody (class DecodeBody)",
			"import Server.Shared.Util.Validation (renderJsonErrors, renderValidationErrors)",
			"import Server.User.Type.Misc ($3)",
			"import Shared.Util.Validation (ValidationErrors, checkNonEmpty)",
			"import Simple.JSON as SJ",
			"",
			"",
			"newtype $2",
			"  = $2 { user :: $3 }",
			"",
			"derive instance generic$2 :: Generic $2 _",
			"",
			"instance show$2 :: Show $2 where",
			"  show = genericShow",
			"",
			"instance eq$2 :: Eq $2 where",
			"  eq = genericEq",
			"",
			"instance decode$2 :: Decode $2 where",
			"  decode = genericDecode $ defaultOptions { unwrapSingleConstructors = true }",
			"",
			"instance encode$2 :: Encode $2 where",
			"  encode = genericEncode $ defaultOptions { unwrapSingleConstructors = true }",
			"",
			"derive newtype instance readForeign$2 :: SJ.ReadForeign $2",
			"derive newtype instance writeForeign$2 :: SJ.WriteForeign $2",
			"",
			"instance decodeBody$2 :: SJ.ReadForeign $2 => DecodeBody $2 where",
			"  decodeBody str =",
			"    runExcept do",
			"      u <- except $ lmap renderJsonErrors $ SJ.readJSON str",
			"      except $ lmap renderValidationErrors $ validate u",
			"",
			"wrap :: $3 -> $2",
			"wrap x = $2 { user: x }",
			"",
			"unwrap :: $2 -> $3",
			"unwrap ($2 { user: x }) = x",
			"",
			"validate$3 :: $3 -> Either ValidationErrors $3",
			"validate$3 o =",
			"  toEither $ { email: _, password: _ }",
			"    <$> (checkNonEmpty \"email\" o.email)",
			"    <*> (checkNonEmpty \"password\" o.password)",
			"",
			"validate :: $2 -> Either ValidationErrors $2",
			"validate a = wrap <$> validate$3 (unwrap a)"
		],
		"description": "moduleRequestBodyType"
	}
}